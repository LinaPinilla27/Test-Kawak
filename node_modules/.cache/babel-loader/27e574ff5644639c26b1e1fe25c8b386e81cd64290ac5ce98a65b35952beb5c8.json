{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"demo-app\"\n};\nconst _hoisted_2 = {\n  class: \"demo-app-main\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_FullCalendar = _resolveComponent(\"FullCalendar\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_FullCalendar, {\n    class: \"demo-app-calendar\",\n    options: _ctx.calendarOptions\n  }, {\n    eventContent: _withCtx(arg => [_createElementVNode(\"b\", null, _toDisplayString(arg.timeText), 1 /* TEXT */), _createElementVNode(\"i\", null, _toDisplayString(arg.event.title), 1 /* TEXT */)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"options\"])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_FullCalendar","options","_ctx","calendarOptions","eventContent","_withCtx","arg","_toDisplayString","timeText","event","title"],"sources":["/Users/lina/Desktop/vue/notes-calendar/src/components/Calendario.vue"],"sourcesContent":["\n<template>\n  <div class='demo-app'>\n    <div class='demo-app-main'>\n      <FullCalendar\n        class='demo-app-calendar'\n        :options='calendarOptions'\n      >\n        <template v-slot:eventContent='arg'>\n          <b>{{ arg.timeText }}</b>\n          <i>{{ arg.event.title }}</i>\n        </template>\n      </FullCalendar>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue'\nimport FullCalendar from '@fullcalendar/vue3'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport { INITIAL_EVENTS, createEventId } from './event-utils'\n\nexport default defineComponent({\n  components: {\n    FullCalendar,\n  },\n  data() {\n    return {\n      calendarOptions: {\n        plugins: [\n          dayGridPlugin,\n          timeGridPlugin,\n          interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay'\n        },\n        initialView: 'dayGridMonth',\n        initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.handleEventClick,\n        eventsSet: this.handleEvents\n        /* you can update a remote database when these fire:\n        eventAdd:\n        eventChange:\n        eventRemove:\n        */\n      },\n      currentEvents: [],\n    }\n  },\n  methods: {\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends // update a property\n    },\n    handleDateSelect(selectInfo) {\n      let title = prompt('Adicionar nota')\n      let calendarApi = selectInfo.view.calendar\n\n      calendarApi.unselect() // clear date selection\n\n      if (title) {\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start: selectInfo.startStr,\n          end: selectInfo.endStr,\n          allDay: selectInfo.allDay\n        })\n      }\n    },\n    handleEventClick(clickInfo) {\n      if (confirm(`Quieres eliminar la nota '${clickInfo.event.title}'`)) {\n        clickInfo.event.remove()\n      }\n    },\n    handleEvents(events) {\n      this.currentEvents = events\n    },\n  }\n})\n\n</script>\n\n\n<style lang='css'>\n\nh2 {\n  margin: 0;\n  font-size: 16px;\n}\n\nul {\n  margin: 0;\n  padding: 0 0 0 1.5em;\n}\n\nli {\n  margin: 1.5em 0;\n  padding: 0;\n}\n\nb { /* used for event dates/times */\n  margin-right: 3px;\n}\n\n.demo-app {\n  display: flex;\n  min-height: 100%;\n  font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\n  font-size: 14px;\n}\n\n.demo-app-sidebar {\n  width: 300px;\n  line-height: 1.5;\n  background: #eaf9ff;\n  border-right: 1px solid #d3e2e8;\n}\n\n.demo-app-sidebar-section {\n  padding: 2em;\n}\n\n.demo-app-main {\n  flex-grow: 1;\n  padding: 3em;\n}\n\n.fc { /* the calendar root */\n  max-width: 1100px;\n  margin: 0 auto;\n}\n\n</style>\n"],"mappings":";;EAEOA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAe;;;uBAD5BC,mBAAA,CAYM,OAZNC,UAYM,GAXJC,mBAAA,CAUM,OAVNC,UAUM,GATJC,YAAA,CAQeC,uBAAA;IAPbN,KAAK,EAAC,mBAAmB;IACxBO,OAAO,EAAEC,IAAA,CAAAC;;IAEOC,YAAY,EAAAC,QAAA,CAAEC,GAAG,KAChCT,mBAAA,CAAyB,WAAAU,gBAAA,CAAnBD,GAAG,CAACE,QAAQ,kBAClBX,mBAAA,CAA4B,WAAAU,gBAAA,CAAtBD,GAAG,CAACG,KAAK,CAACC,KAAK,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}