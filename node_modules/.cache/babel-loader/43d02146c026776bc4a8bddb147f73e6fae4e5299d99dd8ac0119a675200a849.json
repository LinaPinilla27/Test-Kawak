{"ast":null,"code":"import { defineComponent } from \"vue\";\nimport FullCalendar from \"@fullcalendar/vue3\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { INITIAL_EVENTS, createEventId } from \"./event-utils\";\nexport default defineComponent({\n  components: {\n    FullCalendar\n  },\n  data() {\n    return {\n      calendarOptions: {\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n        headerToolbar: {\n          left: \"prev,next today\",\n          center: \"title\",\n          right: \"dayGridMonth,timeGridWeek,timeGridDay\"\n        },\n        initialView: \"dayGridMonth\",\n        initialEvents: INITIAL_EVENTS,\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.handleEventClick,\n        eventsSet: this.handleEvents,\n        dayRender: this.renderDayWithButton\n      },\n      currentEvents: []\n    };\n  },\n  methods: {\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends;\n    },\n    handleDateSelect(selectInfo) {\n      // Prompt for event title and time\n      let title = prompt(\"Please enter a new title for your event\");\n      let time = prompt(\"Please enter the event time (HH:mm)\");\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect();\n      if (title && time) {\n        // Combine date and time and add the event\n        let start = selectInfo.startStr + \"T\" + time;\n        let end = selectInfo.endStr + \"T\" + time;\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start,\n          end,\n          allDay: false\n        });\n      }\n    },\n    handleEventClick(clickInfo) {\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        clickInfo.event.remove();\n      }\n    },\n    handleEvents(events) {\n      this.currentEvents = events;\n    },\n    renderDayWithButton(info) {\n      const button = document.createElement(\"button\");\n      button.textContent = \"Add Event\";\n      button.addEventListener(\"click\", () => this.handleAddEventButtonClick(info.date));\n\n      // Append the button to the day cell\n      info.el.appendChild(button);\n    },\n    handleAddEventButtonClick(date) {\n      // Handle the button click, e.g., show a modal to add an event for the selected date\n      let title = prompt(\"Please enter a new title for your event\");\n      let time = prompt(\"Please enter the event time (HH:mm)\");\n      if (title && time) {\n        let start = date.toISOString().split(\"T\")[0] + \"T\" + time;\n        let end = date.toISOString().split(\"T\")[0] + \"T\" + time;\n        this.$refs.calendar.getApi().addEvent({\n          id: createEventId(),\n          title,\n          start,\n          end,\n          allDay: false\n        });\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineComponent","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","INITIAL_EVENTS","createEventId","components","data","calendarOptions","plugins","headerToolbar","left","center","right","initialView","initialEvents","editable","selectable","selectMirror","dayMaxEvents","weekends","select","handleDateSelect","eventClick","handleEventClick","eventsSet","handleEvents","dayRender","renderDayWithButton","currentEvents","methods","handleWeekendsToggle","selectInfo","title","prompt","time","calendarApi","view","calendar","unselect","start","startStr","end","endStr","addEvent","id","allDay","clickInfo","confirm","event","remove","events","info","button","document","createElement","textContent","addEventListener","handleAddEventButtonClick","date","el","appendChild","toISOString","split","$refs","getApi"],"sources":["/Users/lina/Desktop/vue/notes-calendar/src/components/Calendario.vue"],"sourcesContent":["<script>\nimport { defineComponent } from \"vue\";\nimport FullCalendar from \"@fullcalendar/vue3\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { INITIAL_EVENTS, createEventId } from \"./event-utils\";\n\nexport default defineComponent({\n  components: {\n    FullCalendar,\n  },\n  data() {\n    return {\n      calendarOptions: {\n        plugins: [\n          dayGridPlugin,\n          timeGridPlugin,\n          interactionPlugin,\n        ],\n        headerToolbar: {\n          left: \"prev,next today\",\n          center: \"title\",\n          right: \"dayGridMonth,timeGridWeek,timeGridDay\",\n        },\n        initialView: \"dayGridMonth\",\n        initialEvents: INITIAL_EVENTS,\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.handleEventClick,\n        eventsSet: this.handleEvents,\n        dayRender: this.renderDayWithButton,\n      },\n      currentEvents: [],\n    };\n  },\n  methods: {\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends;\n    },\n    handleDateSelect(selectInfo) {\n      // Prompt for event title and time\n      let title = prompt(\"Please enter a new title for your event\");\n      let time = prompt(\"Please enter the event time (HH:mm)\");\n\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect();\n\n      if (title && time) {\n        // Combine date and time and add the event\n        let start = selectInfo.startStr + \"T\" + time;\n        let end = selectInfo.endStr + \"T\" + time;\n\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start,\n          end,\n          allDay: false,\n        });\n      }\n    },\n    handleEventClick(clickInfo) {\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        clickInfo.event.remove();\n      }\n    },\n    handleEvents(events) {\n      this.currentEvents = events;\n    },\n    renderDayWithButton(info) {\n      const button = document.createElement(\"button\");\n      button.textContent = \"Add Event\";\n      button.addEventListener(\"click\", () => this.handleAddEventButtonClick(info.date));\n\n      // Append the button to the day cell\n      info.el.appendChild(button);\n    },\n    handleAddEventButtonClick(date) {\n      // Handle the button click, e.g., show a modal to add an event for the selected date\n      let title = prompt(\"Please enter a new title for your event\");\n      let time = prompt(\"Please enter the event time (HH:mm)\");\n\n      if (title && time) {\n        let start = date.toISOString().split(\"T\")[0] + \"T\" + time;\n        let end = date.toISOString().split(\"T\")[0] + \"T\" + time;\n\n        this.$refs.calendar.getApi().addEvent({\n          id: createEventId(),\n          title,\n          start,\n          end,\n          allDay: false,\n        });\n      }\n    },\n  },\n});\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}